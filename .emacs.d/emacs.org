#+title: Emacs configuration
#+author: Jens Schneider
#+property: header-args :tangle "~/.emacs.d/init.el"

* Some general purpose functions
#+begin_src emacs-lisp
  (defun acemacs/is-nunc ()
    "Check whether we are on on nunc."
    (if (string-match (system-name) "nunc") t nil))

  ;; show every 30 minutes the events of the next 31 minutes from the calendar
  (defun acemacs/events ()
    (shell-command "bash -c 'notify-send -t 5000 -u low \"$(khal list --format \"{start-time} : {title}\" now 31m)\"'"))
  (run-with-timer 0  (* 30 60) 'acemacs/events)
#+end_src
* Package management
 #+begin_src emacs-lisp
;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
 (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
   (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
;; debug load time of packages
;;(setq use-package-compute-statistics t)
#+end_src

* Basic UI configuration
#+begin_src emacs-lisp

  ;; do not exit on C-x C-c
  (global-unset-key (kbd "C-x C-c"))

  ;; You will most likely need to adjust this font size for your system!
  (defvar acemacs/default-font-size 140)

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  (menu-bar-mode -1)            ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  org-agenda-mode-hook
                  term-mode-hook
                  treemacs-mode-hook
                  shell-mode-hook
                  mu4e-headers-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  ;; Font Configuration ----------------------------------------------------------
  (defvar acemacs/font "Iosevka")
  (defvar acemacs/font-fixed-pitch "Iosevka")
  (defvar acemacs/font-variable-pitch "Iosevka Aile")

  (set-face-attribute 'default nil :font acemacs/font :height acemacs/default-font-size)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font acemacs/font :height acemacs/default-font-size)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font acemacs/font-variable-pitch :height acemacs/default-font-size)

  ;; NOTE: The first time you load your configuration on a new machine, you'll
  ;; need to run the following command interactively so that mode line icons
  ;; display correctly:
  ;;
  ;; M-x all-the-icons-install-fonts

  (use-package all-the-icons)

  (use-package telephone-line
    :init
    (setq telephone-line-primary-left-separator 'telephone-line-cubed-left
          telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
          telephone-line-primary-right-separator 'telephone-line-cubed-right
          telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-right)
    (setq telephone-line-evil-use-short-tag t)
    :config
    (telephone-line-mode t))


  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  (use-package ligature
    :load-path "~/workspace/repos/ligature.el"
    :config
    ;; Enable all Iosevka ligatures in programming modes
    (ligature-set-ligatures 'prog-mode '("<---" "<--"  "<<-" "<-" "->" "-->" "--->" "<->" "<-->" "<--->" "<---->" "<!--"
                                         "<==" "<===" "<=" "=>" "=>>" "==>" "===>" ">=" "<=>" "<==>" "<===>" "<====>" "<!---"
                                         "<~~" "<~" "~>" "~~>" "::" ":::" "==" "!=" "===" "!=="
                                         ":=" ":-" ":+" "<*" "<*>" "*>" "<|" "<|>" "|>" "+:" "-:" "=:" "<******>" "++" "+++"))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))

  (column-number-mode)
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode t)
  (set-face-attribute 'line-number-current-line nil :inherit '(highlight))
  (setq-default tab-width 2)
  (setq make-backup-files nil)

  ;; ediff appearance
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  (setq ediff-split-window-function 'split-window-horizontally)

  (use-package dracula-theme
    :config
    (load-theme 'dracula t))

#+end_src

* Auth source
#+begin_src emacs-lisp
  ;; set pass as standard authentication method
  (use-package auth-source-pass
    :config
    (setq auth-sources '(password-store)))
#+end_src
* Vertico and related stuff configuration
#+begin_src emacs-lisp
      (use-package vertico
      :init
      (vertico-mode)
      :bind( :map vertico-map ("<C-return>" . vertico-exit-input)))


      (use-package orderless
      :init
      ;; Configure a custom style dispatcher (see the Consult wiki)
      ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
      ;;       orderless-component-separator #'orderless-escapable-split-on-space)
      (setq completion-styles '(orderless)
              completion-category-defaults nil
              completion-category-overrides '((file (styles partial-completion)))))

      ;; Persist history over Emacs restarts. Vertico sorts by history position.
      (use-package savehist
      :init
      (savehist-mode))

      (use-package consult
      ;; Replace bindings. Lazily loaded due by `use-package'.
      :bind (;; C-c bindings (mode-specific-map)
              ("C-c k" . consult-kmacro)
              ("C-x b" . consult-buffer)
              ("C-s" . consult-line)
              ("C-c i" . consult-imenu))


      ;; Enable automatic preview at point in the *Completions* buffer. This is
      ;; relevant when you use the default completion UI. You may want to also
      ;; enable `consult-preview-at-point-mode` in Embark Collect buffers.
      :hook (completion-list-mode . consult-preview-at-point-mode)

      :init
      (recentf-mode))

      ;; Enable richer annotations using the Marginalia package
      (use-package marginalia
      ;; Either bind `marginalia-cycle` globally or only in the minibuffer
      :bind (("M-A" . marginalia-cycle)
              :map minibuffer-local-map
              ("M-A" . marginalia-cycle))

      ;; The :init configuration is always executed (Not lazy!)
      :init
      ;; Must be in the :init section of use-package such that the mode gets
      ;; enabled right away. Note that this forces loading the package.
      (marginalia-mode))
          (use-package which-key
          :init (which-key-mode)
          :diminish which-key-mode
          :config
          (setq which-key-idle-delay 1))

    (use-package embark
       :bind
       ("M-o" . embark-act))

      (use-package helpful
        :bind
        ("C-h f" . #'helpful-callable)
        ("C-h v" . #'helpful-variable)
        ("C-h k" . #'helpful-key)
        ("H-h" . #'helpful-at-point))

    (use-package avy
      :config
      (global-set-key (kbd "C-a") 'avy-goto-char-timer))
#+end_src
* Key binding configuration
#+begin_src emacs-lisp
  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  ;; make org-mode easily accessible
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)

  (use-package undo-tree
    :init
    (global-undo-tree-mode)
    :config
    (setq undo-tree-auto-save-history nil))

  ;; evil config
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-i-jump nil)
    (setq evil-want-fine-undo t)
    :custom
    (evil-undo-system 'undo-tree)
    :config
    (evil-mode 1)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)

    ;; some keybindings for evil. Note that arrow keys are easily accessible on the UHK
    (evil-global-set-key 'motion (kbd "<down>") 'evil-next-visual-line)
    (evil-global-set-key 'motion (kbd "<up>") 'evil-previous-visual-line)
    (evil-global-set-key 'normal (kbd "C-w <down>") 'evil-window-down)
    (evil-global-set-key 'normal (kbd "C-w <up>") 'evil-window-up)
    (evil-global-set-key 'normal (kbd "C-w <left>") 'evil-window-left)
    (evil-global-set-key 'normal (kbd "C-w <right>") 'evil-window-right)
    (evil-global-set-key 'normal (kbd "H-k") 'evil-window-down)
    (evil-global-set-key 'normal (kbd "H-i") 'evil-window-up)
    (evil-global-set-key 'normal (kbd "H-j") 'evil-window-left)
    (evil-global-set-key 'normal (kbd "H-l") 'evil-window-right)
    (evil-global-set-key 'normal (kbd "H-c") 'evil-window-delete)
    (evil-global-set-key 'normal (kbd "H-v") 'evil-window-vsplit)
    (evil-global-set-key 'normal (kbd "H-s") 'evil-window-split))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

* Dired
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer))

  (use-package dired-single)

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))
#+end_src

* Email / mu4e
#+begin_src emacs-lisp
  (use-package mu4e
    :commands mu4e
    :defer t
    :ensure nil
    :config
    (make-directory "~/email/posteo" t)
    (make-directory "~/email/ient" t)
    (make-directory "~/email/rwth" t)
    (setq message-send-mail-function 'smtpmail-send-it)
    (setq	user-full-name "Jens Schneider" )
    (setq mu4e-contexts
          `( ,(make-mu4e-context
               :name "Posteo"
               :enter-func (lambda () (mu4e-message "Entering Posteo context"))
               :leave-func (lambda () (mu4e-message "Leaving Posteo context"))
               ;; we match based on the contact-fields of the message
               :match-func (lambda (msg)
                             (when msg
                               (mu4e-message-contact-field-matches msg
                                                                   :to "jens.schneider.ac@posteo.de")))
               :vars '( ( user-mail-address	   . "jens.schneider.ac@posteo.de"  )
                        ( mu4e-compose-signature-auto-include . nil)
                        ( mu4e-compose-signature . "Dr.-Ing. Jens Schneider\nwww.saturnv.de")
                        ( mu4e-sent-folder      . "/posteo/Sent" )
                        ( mu4e-trash-folder     . "/posteo/Trash" )
                        ( mu4e-drafts-folder    . "/posteo/Drafts" )
                        ( mu4e-refile-folder    . "/posteo/Archive" )
                        ( smtpmail-smtp-user    . "jens.schneider.ac@posteo.de" )
                        ( smtpmail-smtp-server  . "posteo.de")
                        ( smtpmail-smtp-service . 587)
                        (mu4e-maildir-shortcuts . ( ("/posteo/Inbox"   . ?i)
                                                    ("/posteo/Sent"    . ?s)
                                                    ("/posteo/Archive" . ?a)
                                                    ("/posteo/Trash"   . ?t)
                                                    ("/posteo/Drafts"   . ?d) ))))
             , (make-mu4e-context
                :name "23Tec"
                :enter-func (lambda () (mu4e-message "Entering 23Tec context"))
                :leave-func (lambda () (mu4e-message "Leaving 23Tec context"))
                ;; we match based on the contact-fields of the message
                :match-func (lambda (msg)
                              (when msg
                                (mu4e-message-contact-field-matches msg
                                                                    :to "schneider@23technologies.cloud")))
                :vars '( ( user-mail-address	   . "schneider@23technologies.cloud"  )
                         ( mu4e-compose-signature-auto-include . nil)
                         ( mu4e-compose-signature . "Dr.-Ing. Jens Schneider
  Software Engineer\n
  Mail: schneider@23technologies.cloud 
  Web: https://23technologies.cloud\n
  23 Technologies GmbH
  Teckstraße 62 / 70190 Stuttgart / Deutschland\n
  Geschäftsführer: Christian Berendt
  Unternehmenssitz: Stuttgart
  Amtsgericht: Stuttgart, HRB 776151")
                         ( mu4e-sent-folder      . "/23Tec/Sent" )
                         ( mu4e-trash-folder     . "/23Tec/Trash" )
                         ( mu4e-drafts-folder    . "/23Tec/Drafts" )
                         ( mu4e-refile-folder    . "/23Tec/Archive" )
                         ( smtpmail-smtp-user    . "schneider@23technologies.cloud" )
                         ( smtpmail-smtp-server  . "mail.your-server.de")
                         ( smtpmail-default-smtp-server . "mail.your-server.de" )
                         ( smtpmail-smtp-service . 587)
                         (mu4e-maildir-shortcuts . ( ("/23Tec/Inbox"   . ?i)
                                                     ("/23Tec/Sent"    . ?s)
                                                     ("/23Tec/Archive" . ?a)
                                                     ("/23Tec/Trash"   . ?t)
                                                     ("/23Tec/Drafts"   . ?d) ))))
             ,(make-mu4e-context
               :name "Rwth"
               :enter-func (lambda () (mu4e-message "Entering Rwth context"))
               :leave-func (lambda () (mu4e-message "Leaving Rwth context"))
               ;; we match based on the contact-fields of the message
               :match-func (lambda (msg)
                             (when msg
                               (mu4e-message-contact-field-matches msg
                                                                   :to "jens.schneider1@rwth-aachen.de")))
               :vars '( ( user-mail-address	   . "jens.schneider1@rwth-aachen.de"  )
                        ( mu4e-sent-folder      . "/rwth/Sent Items" )
                        ( mu4e-trash-folder     . "/rwth/Deleted Items" )
                        ( mu4e-drafts-folder    . "/rwth/Drafts" )
                        ( mu4e-refile-folder    . "/rwth/Archive" )
                        ( smtpmail-smtp-user    . "js199426@rwth-aachen.de" )
                        ( smtpmail-smtp-server  . "mail.rwth-aachen.de")
                        ( smtpmail-smtp-service . 587)
                        (mu4e-maildir-shortcuts . ( ("/rwth/Inbox"         . ?i)
                                                    ("/rwth/Sent Items"    . ?s)
                                                    ("/rwth/Archive"       . ?a)
                                                    ("/rwth/Deleted Items" . ?t)
                                                    ("/rwth/Drafts"         . ?d) ))))
             ,(make-mu4e-context
               :name "Ient"
               :enter-func (lambda () (mu4e-message "Entering Ient context"))
               :leave-func (lambda () (mu4e-message "Leaving Ient context"))
               ;; we match based on the contact-fields of the message
               :match-func (lambda (msg)
                             (when msg
                               (mu4e-message-contact-field-matches msg
                                                                   :to "schneider@ient.rwth-aachen.de")))
               :vars '( ( user-mail-address	   . "schneider@ient.rwth-aachen.de"  )
                        ( mu4e-compose-signature-auto-include . nil)
                        ( mu4e-compose-signature . "Jens Schneider
    Researcher\n
    IENT – Institut für Nachrichtentechnik
    RWTH Aachen University
    Melatener Str. 23
    52074 Aachen
    schneider@ient.rwth-aachen.de
    www.ient.rwth-aachen.de")
                        ( mu4e-sent-folder      . "/ient/Sent Items" )
                        ( mu4e-trash-folder     . "/ient/Deleted Items" )
                        ( mu4e-drafts-folder    . "/ient/Drafts" )
                        ( mu4e-refile-folder    . "/ient/Archive" )
                        ( smtpmail-smtp-user    . "js199426@ient.rwth-aachen.de" )
                        ( smtpmail-smtp-server  . "mail.rwth-aachen.de")
                        ( smtpmail-smtp-service . 587)
                        (mu4e-maildir-shortcuts . ( ("/ient/Inbox"         . ?i)
                                                    ("/ient/Sent Items"    . ?s)
                                                    ("/ient/Archive"       . ?a)
                                                    ("/ient/Deleted Items" . ?t)
                                                    ("/ient/Drafts"         . ?d) ))))
             ))
    ;; work with mbsync
    (setq mu4e-get-mail-command "mbsync -a") 
    (setq mu4e-change-filenames-when-moving t)

    ;; don't keep message buffers around
    (setq message-kill-buffer-on-exit t)

    ;; set mu4e-view-fields 
    (setq mu4e-view-fields '(:from :to :cc :bcc :subject :date :maildir :tags :attachments :signature :decryption))

    ;; don't show related messages and threads by default. Toggle them with z r and z t
    (setq mu4e-headers-include-related nil)
    (setq mu4e-headers-show-threads nil))

  ;;store org-mode links to messages
  (use-package org-mu4e
    :ensure nil
    :after mu4e
    :config
    ;;store link to message if in header view, not to header query
    (setq org-mu4e-link-query-in-headers-mode nil))
#+end_src

* Org mode configuration
#+begin_src emacs-lisp
  (defun acemacs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (defun acemacs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font acemacs/font-variable-pitch :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :background "#23242f" :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil   :inherit 'fixed-pitch)
    (set-face-attribute 'org-verbatim nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

  ;; show todays calendar events, when opening org agenda
  (defun acemacs/agenda-hook ()
    (shell-command "bash -c 'notify-send -t 60000 -u low \"$(khal list --format \"{start-time} : {title}\" today today)\"'"))

  ;; helper function for org-publish. Show the date of a post on the blog sitemap
  (defun acemacs/site-format-entry (entry style project)
      (format "[[file:%s][%s]] --- %s"
              entry
              (org-publish-find-title entry project)
              (format-time-string "%Y-%m-%d" (org-publish-find-date entry project))))

  (use-package org
    :hook
    (org-mode . acemacs/org-mode-setup)
    (org-agenda-mode . acemacs/agenda-hook)
    :ensure t
    :config
    (setq org-ellipsis " ▾")

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    (setq org-agenda-span 'day)
    (setq org-agenda-files
          '("~/org/"))

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (require 'org-protocol)

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w)" "|" "DONE(d!)" "CANC(c!)")))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

  (setq org-capture-templates
    '(("g" "general")
        ("gt" "todo" entry (file+headline "~/org/todo.org" "Tasks")
         "* TODO %?\n")
        ("gm" "todo mail" entry (file+headline "~/org/todo.org" "Tasks")
         "* TODO %?\n from %a")
      ("w" "work")
        ("wt" "todo" entry (file+headline "~/org/work.org" "Todo")
         "* TODO %?\n")
      ("t" "tvv")
        ("tt" "todo" entry (file+headline "~/org/todo.org" "Todo")
         "* TODO %?\n")
        ("tm" "todo mail" entry (file+headline "~/org/tvv.org" "Inbox")
         "* TODO %?\n from %a")
      ))

    (setq org-tag-alist
      '((:startgroup)
         ; Put mutually exclusive tags here
         (:endgroup)
         ("@home" . ?H)
         ("@work" . ?W)
         ("@tvv" .  ?T)
         ("@others" . ?O)
         ("idea" . ?i)))

    (setq org-html-doctype "html5"
          org-html-htmlize-output-type 'css)

    (setq org-publish-project-alist
        '(("orgfiles_blog"
           :base-directory "~/Documents/workspace/website/org"
           :base-extension "org"
           :publishing-directory "/ssh:labora:~/Dokumente/website/posts"
           :publishing-function org-html-publish-to-html
           :headline-levels 3
           :section-numbers nil
           :with-toc nil
           :with-date t
           :auto-sitemap t
           :sitemap-filename "blog.org"
           :sitemap-title "Blog"
           :sitemap-sort-files anti-chronologically
           :sitemap-format-entry acemacs/site-format-entry
           :sitemap-file-entry-format "%d - %t"
           :html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"../org-style.css\" />
                       <link rel=\"stylesheet\" type=\"text/css\" href=\"../custom_style.css\" />
                       <link rel=\"stylesheet\" type=\"text/css\" href=\"../fonts/webfont-iosevka-5.0.1/iosevka.css\" />
                       <link rel=\"stylesheet\" type=\"text/css\" href=\"../fonts/webfont-iosevka-aile-4.0.0/iosevka-aile.css\" />"
           :html-postamble nil)

          ("images_blog"
           :base-directory "~/Documents/workspace/website/org/img"
           :base-extension "jpg\\|gif\\|png"
           :publishing-directory "/ssh:labora:~/Dokumente/website/posts/img"
           :publishing-function org-publish-attachment)

          ("blog" :components ("orgfiles_blog" "images_blog" ))))

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (matlab . t)
       (latex . t)))

    (acemacs/org-font-setup))

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  (use-package htmlize)

  (use-package org-download
  :after org)

  (use-package org-tree-slide
    :defer t)
#+end_src

* Org roam
#+begin_src emacs-lisp
  (use-package org-roam
    :config
    (require 'org-roam-protocol)
    (setq org-id-extra-files (org-roam--list-files-find "find" org-roam-directory))
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/org/notes")
    :bind
    (   (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n g" . org-roam-graph)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n I" . org-roam-insert-immediate))))

  (use-package org-roam-ui
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src
* Completion and snippets
#+begin_src emacs-lisp
  ;; append yasnippet support as described in the following link
  ;; https://www.reddit.com/r/emacs/comments/3r9fic/best_practicestip_for_companymode_andor_yasnippet/
  (defvar company-mode/enable-yas t "Enable yasnippet for all backends.")
  (defun company-mode/backend-with-yas (backend)
    (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
        backend
      (append (if (consp backend) backend (list backend))
              '(:with company-yasnippet))))

  (use-package company
    :demand t
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection)
                ("<down>" . company-select-next))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.1)
    :config
    (global-set-key (kbd "TAB") #'company-indent-or-complete-common)
    :hook
    (prog-mode . company-mode))

  ;;  (use-package company-bibtex
  ;;    :after company
  ;;    :config
  ;;    (setq company-bibtex-bibliography "/home/urbi/Documents/diss/references.bib")
  ;;    (add-to-list 'company-backends 'company-bibtex))
  ;;
  ;;  (use-package company-lua
  ;;    :config
  ;;    (add-to-list 'company-backends 'company-lua))

  ;; (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))

  (use-package company-box
    :hook (company-mode . company-box-mode))

  ;; snippets and advanced syntax checking
  (use-package yasnippet
    :config
    (yas-global-mode))

  (use-package yasnippet-snippets
    :after yasnippet)
#+end_src
* Programming / Development
** General
#+begin_src emacs-lisp
  (defun base64-encode-region-prefix-arg (&rest _args)
    "Pass prefix arg as third arg to `base64-encode-region'."
    (interactive "r\nP"))
  (advice-add 'base64-encode-region :before #'base64-encode-region-prefix-arg)

  (setq comint-terminfo-terminal "xterm-256color")

  (defun endless/colorize-compilation ()
    "Colorize from `compilation-filter-start' to `point'."
    (let ((inhibit-read-only t))
      (ansi-color-apply-on-region
       compilation-filter-start (point))))

  (add-hook 'compilation-filter-hook
            #'endless/colorize-compilation)

  (defun copy-line-path ()
    (interactive)
    (kill-new (concat (file-relative-name buffer-file-name (projectile-project-root)) ":" (number-to-string (line-number-at-pos)))))

#+end_src
** GUD
#+begin_src emacs-lisp
  ;; keep it here, however atm I don't like it
  ;; (defvar gud-overlay
  ;;   (let* ((ov (make-overlay (point-min) (point-min))))
  ;;     (overlay-put ov 'face 'secondary-selection)
  ;;     ov)
  ;;   "Overlay variable for GUD highlighting.")

  ;; (defadvice gud-display-line (after my-gud-highlight act)
  ;;   "Highlight current line."
  ;;   (let* ((ov gud-overlay)
  ;;          (bf (gud-find-file true-file)))
  ;;     (with-current-buffer bf
  ;;       (move-overlay ov (line-beginning-position) (line-beginning-position 2)
  ;;     ;;(move-overlay ov (line-beginning-position) (line-end-position)
  ;;                     (current-buffer)))))

  ;; (defun gud-kill-buffer ()
  ;;   (if (derived-mode-p 'gud-mode)
  ;;       (delete-overlay gud-overlay)))

  ;; (add-hook 'kill-buffer-hook 'gud-kill-buffer)
#+end_src
** Projectile
#+begin_src emacs-lisp

  (defun my-projectile-project-find-function (dir)
    (let ((root (projectile-project-root dir)))
      (and root (cons 'transient root))))

  (use-package projectile
    :diminish projectile-mode
    :demand t
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (setq projectile-switch-project-action #'projectile-dired)
    (with-eval-after-load 'project
      (add-to-list 'project-find-functions 'my-projectile-project-find-function)))

  (use-package projectile-ripgrep
    :after projectile)
#+end_src
** Cmake
#+begin_src emacs-lisp
    (use-package cmake-mode
        :defer t)
#+end_src
** Magit and forge
#+begin_src emacs-lisp
  (use-package magit
    :defer t
    :hook
    (magit-mode . visual-line-mode)
    :custom
    (magit-blame-echo-style 'headings)
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
    (magit-diff-refine-hunk t))

  ;; work with gitlab forges
  (use-package forge
    :after magit
    :init
    (setq forge-add-default-bindings nil)
    :config
    (add-to-list 'forge-alist '("git.rwth-aachen.de" "git.rwth-aachen.de/api/v4" "git.rwth-aachen.de" forge-gitlab-repository))
    (add-to-list 'forge-alist '("github.com" "api.github.com" "github.com" forge-github-repository)))
#+end_src
** eglot
#+begin_src emacs-lisp
  (use-package eglot
    :after company
    :init
    (setq-default eglot-workspace-configuration '((:gopls . (:usePlaceholders t))))
    :config
    (add-to-list 'eglot-server-programs '(tex-mode . ("digestif")))
    ;; this was somehow required when running eglot in some Go projects
    (setq max-specpdl-size 32000)
    (setq max-lisp-eval-depth 8000)
    (set-face-attribute 'eglot-highlight-symbol-face nil :underline t)
    :hook
    ((LaTeX-mode . eglot-ensure)
    (c++-mode . eglot-ensure)
    (c-mode . eglot-ensure)
    (go-mode . eglot-ensure)
    (sh-mode . eglot-ensure)
    ))
#+end_src
** tree-sitter
#+begin_src emacs-lisp
  (use-package tree-sitter-langs)

  (use-package tree-sitter
    :config
    (global-tree-sitter-mode)
    :hook
    (tree-sitter-after-on . tree-sitter-hl-mode))
#+end_src

** c/c++
#+begin_src emacs-lisp
  (use-package c++-mode
    :defer t
    :ensure nil)

  (use-package c-mode
    :defer t
    :ensure nil)
#+end_src
** python
#+begin_src emacs-lisp
  (use-package elpy
      :defer t
      :custom
      (elpy-formatter "black")
      (elpy-rpc-timeout 10)
      :init
      (advice-add 'python-mode :before 'elpy-enable))
      :config
      (setq python-shell-interpreter "python")
      (setq python-shell-interpreter-args "-i")

  (use-package pyenv-mode
    :defer t)
#+end_src

** Jupyter notebook interaction
#+begin_src emacs-lisp
  (use-package ein
    :defer t)
#+end_src
** Yaml
#+begin_src emacs-lisp
      (use-package yaml-mode
        :hook
        ('yaml-mode . (lambda () (add-hook 'before-save-hook #'whitespace-cleanup nil 'local))))
#+end_src
** LaTeX
#+begin_src emacs-lisp
    (use-package tex
      :defer t
      :ensure auctex
      :hook
      (LaTeX-mode . (lambda () (flyspell-mode) (company-mode)))
      :config
      (TeX-source-correlate-mode)
      :custom
      (TeX-command-extra-options "--shell-escape")
      (TeX-source-correlate-start-server t))

    ;; ivy bibtex
    (use-package ivy-bibtex
      :commands
      (ivy-bibtex)
      :custom
      (bibtex-completion-bibliography "~/Documents/diss/references.bib"))
  ;; tikz
(use-package tikz)
#+end_src
** Lua
Use lua5.3 for now, as e.g. the "see" package works only for lua5.3
#+begin_src emacs-lisp
  (use-package lua-mode
    :config
    (setenv "LUA_PATH"
            "/usr/share/lua/5.3/?.lua;/usr/share/lua/5.3/?/init.lua;/usr/lib/lua/5.3/?.lua;/usr/lib/lua/5.3/?/init.lua;./?.lua;./?/init.lua;/home/urbi/.luarocks/share/lua/5.3/?.lua;/home/urbi/.luarocks/share/lua/5.3/?/init.lua")
    (setenv "LUA_CPATH"
            "/usr/lib/lua/5.3/?.so;/usr/lib/lua/5.3/loadall.so;./?.so;/home/urbi/.luarocks/lib/lua/5.3/?.so")
    (setq lua-default-application "lua5.3")
    )
#+end_src
** Nix 
#+begin_src emacs-lisp
  (use-package nix-mode)
#+end_src emacs-lisp
** Go
#+begin_src emacs-lisp
  (use-package go-mode)
  (use-package go-dlv)
#+end_src

** Formatting 
#+begin_src emacs-lisp
(use-package format-all)
#+end_src
** Vterm
#+begin_src emacs-lisp
  (use-package vterm
     :init
     (require 'sh-script)
     :config
     ;; see https://www.reddit.com/r/emacs/comments/op4fcm/send_command_to_vterm_and_execute_it/
     ;; sh-send-line-or-region-and-step
     (defun acemacs/vterm-execute-current-line ()
        "Insert text of current line in vterm and execute."
        (interactive)
        (let (from to end)
            (if (use-region-p)
                (setq from (region-beginning)
                    to (region-end)
                    end to)
            (setq from (line-beginning-position)
                    to (line-end-position)
                    end (1+ to)))
            (setq command (buffer-substring from to))
            (let ((buf (current-buffer)))
            (unless (get-buffer vterm-buffer-name)
                (vterm-other-window))
            (display-buffer vterm-buffer-name t)
            (switch-to-buffer-other-window vterm-buffer-name)
            (vterm--goto-line -1)
            (vterm-send-string command t)
            (vterm-send-return)
            (switch-to-buffer-other-window buf)
            )))
      :bind (:map sh-mode-map ("C-c C-n" . acemacs/vterm-execute-current-line)))
#+end_src
* Spell checking
#+begin_src emacs-lisp
  (use-package ispell
    :ensure nil
    :config
    (setq ispell-program-name "hunspell")
    (setq ispell-local-dictionary "combined")
    (setq ispell-local-dictionary-alist '(("combined" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US,de_DE") nil utf-8)))
    ;; new variable `ispell-hunspell-dictionary-alist' is defined in Emacs
    ;; If it's nil, Emacs tries to automatically set up the dictionaries.
    (when (boundp 'ispell-hunspell-dictionary-alist)
      (setq ispell-hunspell-dictionary-alist ispell-local-dictionary-alist)))
#+end_src

* Start server
#+begin_src emacs-lisp
  (server-start)
#+end_src
